{"uid":"bd54e6fbb531410f","name":"Test TIF conversion","fullName":"tests.test_exe.TestExe#test_set_tif_conversion","historyId":"74c62d90f397090ad5529d9e5dd6481b","time":{"start":1750469490816,"stop":1750469506125,"duration":15309},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.103); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x5618e34260ba <unknown>\n#1 0x5618e2eefe00 <unknown>\n#2 0x5618e2ef6a38 <unknown>\n#3 0x5618e2ef9587 <unknown>\n#4 0x5618e2f8cc7e <unknown>\n#5 0x5618e2f65d32 <unknown>\n#6 0x5618e2f8bc42 <unknown>\n#7 0x5618e2f65b03 <unknown>\n#8 0x5618e2f32664 <unknown>\n#9 0x5618e2f332c1 <unknown>\n#10 0x5618e33ebe1f <unknown>\n#11 0x5618e33efed8 <unknown>\n#12 0x5618e33d3042 <unknown>\n#13 0x5618e33f067e <unknown>\n#14 0x5618e33b9dae <unknown>\n#15 0x5618e3414078 <unknown>\n#16 0x5618e3414288 <unknown>\n#17 0x5618e3424b58 <unknown>\n#18 0x7fabaa850ac3 <unknown>","statusTrace":"self = <test_exe.TestExe object at 0x7fa6a75dee50>\n\n    @allure.title(\"Test TIF conversion\")\n    def test_set_tif_conversion(self):\n        self.login_page().open()\n        self.login_page().login()\n        self.menu().settings.open_setting_market()\n        self.markers_pages().open_create()\n        self.markers_pages().create.choose_enable()\n        self.markers_pages().create.fill_name(\"karavan\")\n        self.markers_pages().create.fill_configuration(\"babu\")\n        self.markers_pages().create.fill_market_type(\"OneZero\")\n        self.markers_pages().create.choose_save_to_csv_file()\n        self.markers_pages().create.choose_save_to_log_file()\n        self.markers_pages().create.click_create()\n        self.markers_pages().refresh_page()\n        self.markers_pages().find_row_by_username(\"karavan\")\n        self.markers_pages().open_action_tif_conversion_by_name(\"karavan\")\n        self.markers_pages().tif_conversion.click_select_fok_to_gtc_checkbox_by_username(\"denver\")\n        self.markers_pages().tif_conversion.click_select_fok_to_gtc_checkbox_by_username(\"fortex\")\n        self.markers_pages().tif_conversion.click_select_ioc_to_gtc_checkbox_by_username(\"hello\")\n        self.markers_pages().tif_conversion.click_save_rules()\n        self.markers_pages().tif_conversion.click_ok()\n        self.markers_pages().tif_conversion.check_select_fok_to_gtc_checkbox_by_username(\"denver\")\n        self.markers_pages().tif_conversion.check_select_fok_to_gtc_checkbox_by_username(\"fortex\")\n        self.markers_pages().tif_conversion.check_select_ioc_to_gtc_checkbox_by_username(\"hello\")\n        self.markers_pages().tif_conversion.deselect_all()\n        self.markers_pages().tif_conversion.click_save_rules()\n>       self.markers_pages().tif_conversion.click_ok()\n\ntests/test_exe.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/markers_page/components/tif_conversion.py:123: in click_ok\n    self.ui_helper.click(self._BUTTON_OK_LOCATOR)\nhelpers/ui_helper.py:62: in click\n    self.wait.until(self.EC.element_to_be_clickable(locator), message=f\"{element_name} is not clickable\").click()\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:137: in until\n    value = method(self._driver)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate\n    element = visibility_of(target)(driver)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:547: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa6a76f2e50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#16 0x5618e3414288 \\\\u003Cunknown>\\\\n#17 0x5618e3424b58 \\\\u003Cunknown>\\\\n#18 0x7fabaa850ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.103); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x5618e34260ba <unknown>\nE       #1 0x5618e2eefe00 <unknown>\nE       #2 0x5618e2ef6a38 <unknown>\nE       #3 0x5618e2ef9587 <unknown>\nE       #4 0x5618e2f8cc7e <unknown>\nE       #5 0x5618e2f65d32 <unknown>\nE       #6 0x5618e2f8bc42 <unknown>\nE       #7 0x5618e2f65b03 <unknown>\nE       #8 0x5618e2f32664 <unknown>\nE       #9 0x5618e2f332c1 <unknown>\nE       #10 0x5618e33ebe1f <unknown>\nE       #11 0x5618e33efed8 <unknown>\nE       #12 0x5618e33d3042 <unknown>\nE       #13 0x5618e33f067e <unknown>\nE       #14 0x5618e33b9dae <unknown>\nE       #15 0x5618e3414078 <unknown>\nE       #16 0x5618e3414288 <unknown>\nE       #17 0x5618e3424b58 <unknown>\nE       #18 0x7fabaa850ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1750469459464,"stop":1750469459520,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1750469488814,"stop":1750469490815,"duration":2001},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_xunit_setup_method_fixture_TestExe","time":{"start":1750469490815,"stop":1750469490815,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.103); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0x5618e34260ba <unknown>\n#1 0x5618e2eefe00 <unknown>\n#2 0x5618e2ef6a38 <unknown>\n#3 0x5618e2ef9587 <unknown>\n#4 0x5618e2f8cc7e <unknown>\n#5 0x5618e2f65d32 <unknown>\n#6 0x5618e2f8bc42 <unknown>\n#7 0x5618e2f65b03 <unknown>\n#8 0x5618e2f32664 <unknown>\n#9 0x5618e2f332c1 <unknown>\n#10 0x5618e33ebe1f <unknown>\n#11 0x5618e33efed8 <unknown>\n#12 0x5618e33d3042 <unknown>\n#13 0x5618e33f067e <unknown>\n#14 0x5618e33b9dae <unknown>\n#15 0x5618e3414078 <unknown>\n#16 0x5618e3414288 <unknown>\n#17 0x5618e3424b58 <unknown>\n#18 0x7fabaa850ac3 <unknown>","statusTrace":"self = <test_exe.TestExe object at 0x7fa6a75dee50>\n\n    @allure.title(\"Test TIF conversion\")\n    def test_set_tif_conversion(self):\n        self.login_page().open()\n        self.login_page().login()\n        self.menu().settings.open_setting_market()\n        self.markers_pages().open_create()\n        self.markers_pages().create.choose_enable()\n        self.markers_pages().create.fill_name(\"karavan\")\n        self.markers_pages().create.fill_configuration(\"babu\")\n        self.markers_pages().create.fill_market_type(\"OneZero\")\n        self.markers_pages().create.choose_save_to_csv_file()\n        self.markers_pages().create.choose_save_to_log_file()\n        self.markers_pages().create.click_create()\n        self.markers_pages().refresh_page()\n        self.markers_pages().find_row_by_username(\"karavan\")\n        self.markers_pages().open_action_tif_conversion_by_name(\"karavan\")\n        self.markers_pages().tif_conversion.click_select_fok_to_gtc_checkbox_by_username(\"denver\")\n        self.markers_pages().tif_conversion.click_select_fok_to_gtc_checkbox_by_username(\"fortex\")\n        self.markers_pages().tif_conversion.click_select_ioc_to_gtc_checkbox_by_username(\"hello\")\n        self.markers_pages().tif_conversion.click_save_rules()\n        self.markers_pages().tif_conversion.click_ok()\n        self.markers_pages().tif_conversion.check_select_fok_to_gtc_checkbox_by_username(\"denver\")\n        self.markers_pages().tif_conversion.check_select_fok_to_gtc_checkbox_by_username(\"fortex\")\n        self.markers_pages().tif_conversion.check_select_ioc_to_gtc_checkbox_by_username(\"hello\")\n        self.markers_pages().tif_conversion.deselect_all()\n        self.markers_pages().tif_conversion.click_save_rules()\n>       self.markers_pages().tif_conversion.click_ok()\n\ntests/test_exe.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/markers_page/components/tif_conversion.py:123: in click_ok\n    self.ui_helper.click(self._BUTTON_OK_LOCATOR)\nhelpers/ui_helper.py:62: in click\n    self.wait.until(self.EC.element_to_be_clickable(locator), message=f\"{element_name} is not clickable\").click()\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:137: in until\n    value = method(self._driver)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate\n    element = visibility_of(target)(driver)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:547: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa6a76f2e50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#16 0x5618e3414288 \\\\u003Cunknown>\\\\n#17 0x5618e3424b58 \\\\u003Cunknown>\\\\n#18 0x7fabaa850ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.103); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0x5618e34260ba <unknown>\nE       #1 0x5618e2eefe00 <unknown>\nE       #2 0x5618e2ef6a38 <unknown>\nE       #3 0x5618e2ef9587 <unknown>\nE       #4 0x5618e2f8cc7e <unknown>\nE       #5 0x5618e2f65d32 <unknown>\nE       #6 0x5618e2f8bc42 <unknown>\nE       #7 0x5618e2f65b03 <unknown>\nE       #8 0x5618e2f32664 <unknown>\nE       #9 0x5618e2f332c1 <unknown>\nE       #10 0x5618e33ebe1f <unknown>\nE       #11 0x5618e33efed8 <unknown>\nE       #12 0x5618e33d3042 <unknown>\nE       #13 0x5618e33f067e <unknown>\nE       #14 0x5618e33b9dae <unknown>\nE       #15 0x5618e3414078 <unknown>\nE       #16 0x5618e3414288 <unknown>\nE       #17 0x5618e3424b58 <unknown>\nE       #18 0x7fabaa850ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException","steps":[],"attachments":[{"uid":"8321f906d95cbbef","name":"1750469459.4334595","source":"8321f906d95cbbef.png","type":"image/png","size":60645}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_xunit_setup_method_fixture_TestExe::0","time":{"start":1750469506229,"stop":1750469506229,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver::0","time":{"start":1750469506229,"stop":1750469506305,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_exe"},{"name":"subSuite","value":"TestExe"},{"name":"host","value":"pkrvmxyh4eaekms"},{"name":"thread","value":"5307-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_exe"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"a3a56c743678c248","status":"passed","time":{"start":1750468787300,"stop":1750468804968,"duration":17668}}]},"tags":[]},"source":"bd54e6fbb531410f.json","parameterValues":[]}